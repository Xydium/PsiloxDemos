VERTEX:

#version 120

void main() {
	gl_Position = projection_transform * gl_Vertex;
}

FRAGMENT:

#version 120

uniform vec4 color;
uniform float time;
uniform float threshold;

float rand(float n) {
	return fract(sin(n) * 43758.5453123);
}

float noise(float p) {
	float fl = floor(p);
	float fc = fract(p);
	return mix(rand(fl), rand(fl + 1.0), fc);
}

void main() {
	float noise = noise(gl_FragCoord.x * gl_FragCoord.y);
	vec2 coord = gl_FragCoord.xy;
	if(noise > threshold) {
		float ntime = time * noise * rand(coord.x) * rand(coord.y);
		float r = mod(noise * 10, 1) + .4;
		float g = mod(noise * 50, 1) + .5;
		float b = mod(noise * 100, 1) + .7;
		float a = abs(sin(sin(ntime - coord.y) * cos(ntime + coord.x))) * .5 + .3;
		gl_FragColor = vec4(r, g, b, a);
	} else {
		gl_FragColor = color;	
	}
}